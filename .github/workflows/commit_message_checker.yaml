name: commit_message_checker

on:
  workflow_call:

env:
  GIT_COMMENT: ${{ github.event.comment.body }}"

jobs:

  check:
    runs-on: ubuntu-latest
    #if: github.event.issue.pull_request && contains(github.event.comment.body, '/build')
    outputs:
      build_env: ${{ steps.check.outputs.build_env }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Check
      id: check
      run: |
        #!/bin/bash
        DEPLOY_STRING=$(echo "$GIT_COMMENT" | grep -o '/build\s*\w*')
        if [ -n "$DEPLOY_STRING" ]; then
          BUILD_ENV=$(echo "$DEPLOY_STRING" | awk '{ print $2 }')
          echo "Commit message contains '$DEPLOY_STRING'. Triggering the workflow."
          echo "BUILD_ENV: $BUILD_ENV"
          echo "build_env=$BUILD_ENV" >> "$GITHUB_OUTPUT"
        else
          echo "Commit message does not contain '/build <env id>'. Exiting without running the workflow."
          exit 78
        fi
    
    - name: Extract Release Type from Comment
      id: extract_release_type
      run: |
        COMMENT="${{ github.event.comment.body }}"
        RELEASE_TYPE=$(echo "$COMMENT" | awk '{print $2}')
          
        if [[ "$RELEASE_TYPE" != "major" && "$RELEASE_TYPE" != "minor" && "$RELEASE_TYPE" != "patch" ]]; then
          echo "Invalid release command!"
          echo "RELEASE_TYPE=invalid" >> $GITHUB_ENV
        fi
          
        echo "Release type: $RELEASE_TYPE"
        echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
    
    - name: Get Current Version
      id: get_version
      run: |
        CURRENT_VERSION=$(gh release view --json tagName --jq '.tagName' || echo "v0.0.0")
        echo "Current version: $CURRENT_VERSION"
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Calculate Next Version
      if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/build ') &&
          (contains(github.event.comment.body, '/build major') || 
          contains(github.event.comment.body, '/build minor') || 
          contains(github.event.comment.body, '/build patch'))
      id: next_version
      run: |
        VERSION="${{ env.CURRENT_VERSION }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
        case "${{ env.RELEASE_TYPE }}" in
          major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
          minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
          patch) PATCH=$((PATCH + 1)) ;;
          *) echo "Invalid release type"; exit 1 ;;
        esac
          
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "Next version: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Create GitHub Release
      if: github.event.issue.pull_request && env.RELEASE_TYPE != 'invalid' && startsWith(github.event.comment.body, '/build ') &&
          (contains(github.event.comment.body, '/build major') || 
          contains(github.event.comment.body, '/build minor') || 
          contains(github.event.comment.body, '/build patch'))
      run: gh release create ${{ env.NEW_VERSION }} --generate-notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Print build_env
      run: echo "build_env=${{ steps.check.outputs.build_env }}"







