name: Node_Regular_Cicd_Action
on:
  workflow_call:
    inputs:
      workload_identity_provider:
        type: string
      service_account:
        type: string
      cluster_name:
        type: string
      cluster_location:
        type: string
      BOT_USER:
        type: string
    secrets:
      BOT_TOKEN:
        description: "Bot token"
        required: true
env:
  GIT_AUTHOR_NAME: ${{ inputs.BOT_USER }}
  PULL_BASE_REF: ${{ github.base_ref }}
  PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  PULL_PULL_REF: refs/pull/${{ github.event.pull_request.number }}/head
  PULL_PULL_SHA: ${{ github.event.pull_request.head.sha }}
  PULL_REFS: ${{ github.base_ref }}:${{ github.event.pull_request.base.sha }},${{ github.event.pull_request.number }}:${{ github.event.pull_request.head.sha }}:refs/pull/${{ github.event.pull_request.number }}/head
  JOB_NAME: "verify"
  JOB_SPEC: "type:presubmit"
  JOB_TYPE: "presubmit"
  REPO_NAME: ${{ github.event.repository.name }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_URL: https://github.com/${{ github.repository }}.git
  JX_KUBERNETES: true
  SOURCE_DIR: "${{ github.workspace }}/source"

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: sh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: 'Auth'
        name: 'Authenticate_to_Google_Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: 'Set_Up_Cloud_SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: Docker_Auth
        run: |-
              #!/bin/bash
              gcloud auth configure-docker us-docker.pkg.dev

      - name: Docker_Build
        run: |-
              #!/bin/bash
              run: |
                    #!/bin/bash
                    REGISTRIES="${{env.REGISTRIES}}"
                    REPOSITORY="${{env.REPOSITORY}}"
                    GIT_SHORT_HASH=0.0.0-$(git rev-parse --short HEAD)
                    ROOT_DIR="$(pwd)"
                    IMAGE_NAME=      
                    echo "SHA:$GIT_SHORT_HASH"  
                    echo "Building Docker image ..."                  
                    docker build -f  "Dockerfile"  -t "$REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$GIT_SHORT_HASH" .                     
                    echo "*************************************************************"
                          
                    docker image ls |grep -ai $REGISTRIES > dockertags.txt
                    ####
                    # Read input from dockertags.txt
                    echo "##### Docker build detailss" >> comment.txt
                    echo "IMAGE | TAG | SIZE" >> comment.txt
                    echo "------ | ------ | ------ " >> comment.txt
                    #echo "............................................................................" >> comment.txt
                    while IFS= read -r line; do
                          
                          # Use '/' as the delimiter and print the text after the 4th '/'
                          OUTPUT=$(echo "$line" | awk -F'/' '{print $(NF-0)}')
                          IMAGE=$(echo "$OUTPUT" | awk '{print $1}')
                          TAG=$(echo "$OUTPUT" | awk '{print $2}')
                          SIZE=$(echo "$OUTPUT" | awk '{print $7}')
                          # Print the result
                          
                          echo "$IMAGE | $TAG | $SIZE" >> comment.txt
                        
                    done < dockertags.txt
                    ####





