name: node_regular_cicd_action
on:
  workflow_call:
    inputs:
      workload_identity_provider:
        type: string
      service_account:
        type: string
      cluster_name:
        type: string
      cluster_location:
        type: string
      pr_number:
        type: string
        required: true
      flex-template_path:
        type: string
        required: true
      ref:
        type: string

    #   BOT_USER:
    #     type: string
    #   PR_NUMBER:
    #     type: string
    # secrets:
    #   GITTOKEN:
    #     description: "Git token"
    #     required: true
    outputs:
      image_name:
        value: ${{ jobs.build_job.outputs.image_name }}
      image_tag: 
        value: ${{ jobs.build_job.outputs.image_tag }}

env:
  GIT_AUTHOR_NAME: ${{ inputs.BOT_USER }}
  PULL_BASE_REF: ${{ github.base_ref }}
  PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  PULL_PULL_REF: refs/pull/${{ github.event.pull_request.number }}/head
  PULL_PULL_SHA: ${{ github.event.pull_request.head.sha }}
  PULL_REFS: ${{ github.base_ref }}:${{ github.event.pull_request.base.sha }},${{ github.event.pull_request.number }}:${{ github.event.pull_request.head.sha }}:refs/pull/${{ github.event.pull_request.number }}/head
  JOB_NAME: "verify"
  JOB_SPEC: "type:presubmit"
  JOB_TYPE: "presubmit"
  REPO_NAME: ${{ github.event.repository.name }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_URL: https://github.com/${{ github.repository }}.git
  JX_KUBERNETES: true
  SOURCE_DIR: "${{ github.workspace }}/source"
  OCI_REGISTRY: "oci://us-docker.pkg.dev/prodoscore-artifactory/charts/"
  REGISTRIES: "us-docker.pkg.dev"
  REPOSITORY: "prodoscore-artifactory"

jobs:
  build_job:
    runs-on: ubuntu-latest
    outputs:
      image_name: "${{ steps.docker_push.outputs.image_name }}"
      image_tag: "${{ steps.docker_push.outputs.image_tag }}"
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: sh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          #ref: ${{ github.event.client_payload.ref }}
           ref: refs/pull/${{ github.event.issue.number }}/head
                


      - id: 'Auth'
        name: 'Authenticate_to_Google_Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: 'Set_Up_Cloud_SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: Docker_Auth
        run: |-
              #!/bin/bash
              gcloud auth configure-docker us-docker.pkg.dev

      - name: Docker_Build   
        id: docker_build     
        run: |-
                    #!/bin/bash
                    pwd
                    ls -ltrh
                    git branch
                    REGISTRIES="${{env.REGISTRIES}}"
                    REPOSITORY="${{env.REPOSITORY}}"
                    REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
                    GIT_SHORT_HASH="0.0.0-$(git rev-parse --short HEAD)"
                    echo "git_short_hash=${GIT_SHORT_HASH}" >> "$GITHUB_OUTPUT"
                    echo "Repository Name: $REPO_NAME"
                    #Doker build
                    docker build -f "Dockerfile" -t "$REGISTRIES/$REPOSITORY/images/$REPO_NAME:$GIT_SHORT_HASH" .
                    docker image ls | grep -ai $REPO_NAME
                    docker image ls | grep -ai $REPO_NAME > dockertags.txt
                    
                    echo "##### Docker build details" >> comment.txt
                    echo "IMAGE | TAG | SIZE" >> comment.txt
                    echo "------ | ------ | ------ " >> comment.txt
                    # Read input from dockertags.txt
                    while IFS= read -r line; do
                            # Use '/' as the delimiter and print the text after the 4th '/'
                            OUTPUT=$(echo "$line" | awk -F'/' '{print $(NF-0)}')
                            IMAGE=$(echo "$OUTPUT" | awk '{print $1}')
                            TAG=$(echo "$OUTPUT" | awk '{print $2}')
                            SIZE=$(echo "$OUTPUT" | awk '{print $7}')
                            # Print the result
                            echo "$IMAGE | $TAG | $SIZE" >> comment.txt
                    done < dockertags.txt


      - name: Docker_Push
        id: docker_push
        run: |
            #!/bin/bash

            # Set the desired registry
            REGISTRY="us-docker.pkg.dev"

            # Get the list of images and iterate through them
            docker image ls | grep -ai $REGISTRY | while read -r line; do
                # Extract image name, tag, and ID
                image_name=$(echo $line | awk '{print $1}')
                image_tag=$(echo $line | awk '{print $2}')
                image_id=$(echo $line | awk '{print $3}')

                # Push the image to the specified registry
                echo "Docker Push $image_name"
                docker tag $image_id $image_name:$image_tag
                docker push $image_name:$image_tag
                #echo "image_name=world" >> "$GITHUB_OUTPUT"
                # Output the image name and tag
                echo "image_name=${image_name}" >> "$GITHUB_OUTPUT"
                echo "image_tag=${image_tag}" >> "$GITHUB_OUTPUT"
                
            done

      - name: Flex_Template_Build
        id: flex_template_build
        run: |
              #gcloud dataflow flex-template build gs://clusters-df-dw-collab/template_file_gcs_path/df-dw-collab-template:${{ steps.docker_build.outputs.git_short_hash }}.json --image "us-docker.pkg.dev/prodoscore-artifactory/images/df-dw-collab:${{ steps.docker_build.outputs.git_short_hash }}" --sdk-language "PYTHON" --metadata-file "metadata.json"
              gcloud dataflow flex-template build ${{ inputs.flex-template_path }}:${{ steps.docker_build.outputs.git_short_hash }}.json --image "us-docker.pkg.dev/prodoscore-artifactory/images/$REPO_NAME:${{ steps.docker_build.outputs.git_short_hash }}" --sdk-language "PYTHON" --metadata-file "metadata.json"                                    
                                                  

      - name: Pull Request data
        id: pr_data
        run: |
          pr_number='${{ github.event.issue.number }}'
          echo "pr_number=${pr_number}" >> $GITHUB_ENV
          cat comment.txt
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        id: hello
        with:
          filePath:  comment.txt
          pr_number: ${{ steps.pr_data.outputs.pr_number }}







